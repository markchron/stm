CMake >=2.8.4 is required, otherwise, add
set(CMAKE_LEGACY_CYGWIN_WIN32 0) 
at the top of the top-level CMakeLists.txt. It means build on Cygwin without WIN32.

cmake not find Visual Studio 10 Win64 in Generators list. Check this by cmd "cmake --help" 

## --------------------------------------------
## NO IDEA WHY, DOES NOT WORK ANYMORE!
## win32-cygwin-vs2010-Intel
cygwin-cmake is compiled without the VS generators while the windows version has these. SET up environment variable by cmd
$ export PATH=/cygdrive/c/Program\ Files\ \(x86\)/CMake/bin:${PATH}
$ cd build
$ cmake .. -DST_WITH_INTEL:BOOL=OFF -G "Visual Studio 10 Win64"
Then open *.sln by visual studio 2010 - Build (F7)
The compiled file locates at /build/bin/Debug/stm.exe
Make test does not work now.
## --------------------------------------------
## win32-cygwin-GNU
- switch back with cygwin and default GNU
"Unix Makefiles"
Generator generates Makefiles for make under UNIX and also for cygwin (i.e. with UNIX paths)
$ cmake .. -G "CodeBlocks - Unix Makefiles"
or
$ cmake .. -G "Unix Makefiles" 

## win32-WIN-R%cmd-vs2010-
C:\Users\hzhong.UC> cd Documents\workspace\stm1023\build
		  > cmake --help
		  > set PATH="C:\Program Files (x86)\CMake\bin";"C:\Program Files (x86)\Intel\Composer XE 2011 SP1\bin\intel64";%PATH%
		  > cmake --help
		  > which ifort
/cygdrive/c/Program Files (x86)/Intel/Composer XE 2011 SP1/bin/intel64/ifort
		  > cmake .. -DST_WITH_INTEL:BOOL=OFF -G "Visual Studio 10 2010"
##		  > cmake .. -DST_WITH_INTEL:BOOL=OFF -G "Visual Studio 10 Win64"
But ${CMAKE_Fortran_COMPILER_ID} is empty!
Then open *.sln by visual studio 2010 - Build (F7)
The compiled file locates at /build/bin/Debug/stm.exe
Make test does not work now.

## Fortran feature class(*) is not compatible with gfortran 4.4.7. This compiling error can be avoid with cmake cmd:
$ CC=/global/software/gcc/gcc-4.8.4/bin/gcc FC=/global/software/gcc/gcc-4.8.4/bin/gfortran cmake .. -DST_WITH_INTEL:BOOL=OFF 
## in parallel.westgrid.ca, but the linked mpi libraries, are compatible with gcc-4.4.7 and icc.
## get warning: 
## libgfortran.so.1 may conflicit with libgfortran.so.3
## Similar openmpi is required to keep consistency (compiled with corresponding compiler)

## METIS
$cmake .. -DST_METIS_DIR=~/lib/metis-intel

## Run-Time Errors: Intel-Fortran run-time error messages do not usually indicate the exact source location causing the error. The following compiler options are related to handling errors and exceptions
-check [keyword] (Linux*) 
/check[:keyword] (Windows*)
 generates extra code to catch certain conditions at run time. 
 keyword=bounds; Debugger will catch and stop at array or character string bounds errors. An error is reported if the expression is outside the dimension of the array or the length of the string. 
 keyword=uninit; generates code for dynamic checks of uninitialized variables. If a varaible is read before written, a rn-time error routine will be called
 keyword=noformat; keyword=nooutput_conversion; reduce the severity level of the associated run-time error to allow program continuation
 keyword=pointers; generates code to test for disassociated pointer and unallocatable arrays
	" forrtl: severe (408): fort: (7): Attempt to use pointer VWGT when it is not associated with a target "
 keyword=arg_temp_creation: performance degradation. Eliminate these copies by making sure you don't pass non-contigous arrays to routines that don't accept arrays by descriptor
    " forrtl: warning (402): fort: (1): In call to I/O Write routine, an array temporary was created for argument #1 "

 traceback
 generates extra information in the object file to provide source file traceback information when a severe error occurs at run time. This simplifies the task of locating the cause of severe run-time erros. 

 fpe
 controls the handling of floating-point arithmetic exceptions (IEEE arithmetic) at run time.
 -fpe[:]3 ; all floating-point exceptions are disabled, allowing IEEE exceptional values and program continuation. 
 -fpe[:]0 ; in contrast, stops execution when an exceptional value (such as NaN) is generated, when floating overflow or dividied by zero occur, or when attempting to use a denormalized number, when usually allows you to localize the cuase of the error. It also forces underflow to zero

 warn | nowarn
 controls compile-time warning messages, which, in some circumstances, can help determine the cause of a run-time error

 -fexceptions (Linux*)
 enables C++ exception handling table generation, preventing Fortran routines in mixed-language applications from interfering with exception handling between C++ routines
 On windows*, the compilation Diagnostics Options in the IDE control compile-time diagnostic messages, which, in some circumstances can help determine the cause of a run-time error.
